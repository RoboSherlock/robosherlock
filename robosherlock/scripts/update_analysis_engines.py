#!/usr/bin/python

import sys, os
import check_modification

################################################################################
# Constants
################################################################################

XML_START = "<delegateAnalysisEngineSpecifiers>"
XML_END = "</delegateAnalysisEngineSpecifiers>"
XML_ANNOTATOR = '\
    <delegateAnalysisEngine key="%s">\n\
      <import location="%s"/>\n\
    </delegateAnalysisEngine>\n'

################################################################################
# getFiles
################################################################################

def getFiles(path):
  files = []
  for subdir in os.walk(path).next()[1]:
    subdirpath = os.path.join(path,subdir)
    for filename in os.listdir(subdirpath):
      filepath = os.path.join(subdirpath, filename)
      (name,ext) = os.path.splitext(filename)
      if not os.path.isfile(filepath) or ext != ".xml":
        continue
      files.append(filepath)
  for filename in os.listdir(path):
    filepath = os.path.join(path, filename)
    (name,ext) = os.path.splitext(filename)
    if not os.path.isfile(filepath) or ext != ".xml":
      continue
    files.append(filepath)
  return files

################################################################################
# getName
################################################################################

def getName(path):
  xml = open(path, 'r')
  data = xml.read()
  xml.close()

  (_,_,res) = data.partition("<name>")
  (name,_,_) = res.partition("</name>")
  return name

################################################################################
# getAnnotators
################################################################################

def getAnnotators(files):
  annotators = []
  for filepath in files:
    name = getName(filepath)
    if name != "":
      annotators.append((name, filepath))
  return sorted(annotators)

################################################################################
# createAnnotatorsXML
################################################################################

def createAnnotatorsXML(enginePath, annotators):
  xml = XML_START + "\n    <!-- AUTOGENERATED CONTENT BEGINS -->\n"
  for (name, xmlFile) in annotators:
    relpath = os.path.relpath(xmlFile, enginePath)
    xml += XML_ANNOTATOR % (name, relpath)
  xml += "    <!-- AUTOGENERATED CONTENT ENDS -->\n  " + XML_END
  return xml

################################################################################
# getAnalysisEngines
################################################################################

def getAnalysisEngines(path):
  engines = []
  for filename in os.listdir(path):
    filepath = os.path.join(path, filename)
    (_,ext) = os.path.splitext(filename)
    if not os.path.isfile(filepath) or ext != ".xml":
      continue
    engines.append(filepath)
  return engines

################################################################################
# updateAnalysisEngines
################################################################################

def updateAnalysisEngines(engines, xmlAnnotators):
  updated = 0
  for engine in engines:
    xml = open(engine, 'r')
    data = xml.read()
    xml.close()

    (start,_,res) = data.partition(XML_START)
    (mid,_,end) = res.partition(XML_END)
    old = XML_START + mid + XML_END
    if(old == xmlAnnotators):
      continue

    xml = open(engine, 'w')
    xml.write(start)
    xml.write(xmlAnnotators)
    xml.write(end)
    xml.close()
    updated += 1
  return updated

################################################################################
# main
################################################################################

def main():
  if(len(sys.argv) < 3):
    sys.stderr.write("Error: Not enough arguments!\n")
    sys.stderr.write("Run instructions:\n")
    sys.stderr.write("  updateAnalysisEngines [pathEngines] [pathAnnotators]\n")
    exit()

  pathEngines = sys.argv[1]
  pathsAnnotators = sys.argv[2:]

  try:
    files = []
    print("searching for annotators...")
    for pathAnnotators in pathsAnnotators:
      if os.path.exists(pathAnnotators) and os.path.isdir(pathAnnotators):
          files += getFiles(pathAnnotators)
      else:
        sys.stderr.write("Error: incorrect annotator path: {}\n".format(pathAnnotators))
        return -1
    print("found %d annotator..." % (len(files)))

    print("searching for analysis engines...")
    if not os.path.exists(pathEngines) or not os.path.isdir(pathEngines):
      sys.stderr.write("Error: incorrect analysis engines path: {}\n".format(pathEngines))
      return -1
    engines = getAnalysisEngines(pathEngines)
    print("found %d analysis engines..." % (len(engines)))

    print("checking for modification...")
    if check_modification.isModified(files + engines):
      print("Files modified. Updating annotators...")
    else:
      print("Files not modified. Nothing to do.")
      return 0

    print("extracting annotator names...")
    annotators = getAnnotators(files)
    print("found %d annotators..." % (len(annotators)))
    print("creating xml for annotators...")
    xmlAnnotators = createAnnotatorsXML(pathEngines, annotators)
    print("updating analysis engines...")
    updated = updateAnalysisEngines(engines, xmlAnnotators)
    print("%d updated, %d already up to date." % (updated, len(engines) - updated))
    print("update finished!")
  except Exception as e:
    sys.stderr.write("Error: {}\n".format(e.message))
    return -1
  return 0

################################################################################
# __main__
################################################################################

if __name__ == "__main__":
  ret = main()
  if ret != 0:
    check_modification.removeModified()
  sys.exit(ret)
