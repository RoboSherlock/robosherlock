#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Fri Oct 16 13:34:29 2015

@author: Ferenc Balint-Benczedi
"""
import sys
import rospkg
import os.path

XMLDEF_PATH = "/descriptors/annotators/"
SOURCE_PATH = "/src/"


def create_xml_def(pathToPackage,annotatorName):
    pathToXmlLocation = pathToPackage+XMLDEF_PATH
    xmlFileName = annotatorName+".yaml"
    if os.path.isfile(pathToXmlLocation+xmlFileName):
        print "An Annotator with the name "+annotatorName+" already exists in "+pathToXmlLocation+".!"
        return()
    libName = "rs_"+annotatorName
    print ("Creating "+xmlFileName+" in "+ pathToXmlLocation)
    f = open(pathToXmlLocation+xmlFileName, 'w')
    txt = ("annotator:\n"
           "  implementation: "+libName+"\n"
           "parameters:\n"
           "  test_param: 0.01\n"
           "capabilities:\n"
           "  inputs: {}\n"
           "  outputs: {}\n")
    f.write(txt)
    f.close()
    
def create_cpp_source(pathToPackage,annotatorName):
    pathToCppLocation = pathToPackage+SOURCE_PATH
    cppFileName = annotatorName+".cpp"
    if os.path.isfile(pathToCppLocation+cppFileName):
        print "An Annotator with the name "+annotatorName+" already exists in "+pathToCppLocation+". Terminating!"
        return
    print ("Creating "+cppFileName+" in "+ pathToCppLocation)
    f = open(pathToCppLocation+cppFileName, 'w')
    txt = ("#include <uima/api.hpp>\n\n"
           "#include <pcl/point_types.h>\n"
           "#include <rs/types/all_types.h>\n"
           "//RS\n"
           "#include <rs/scene_cas.h>\n"
           "#include <rs/utils/time.h>\n\n"
           "using namespace uima;\n\n\n"
           "class "+annotatorName+" : public Annotator\n{\n"
           "private:\n"
           "  float test_param;\n\n"
           "public:\n\n"
           "  TyErrorId initialize(AnnotatorContext &ctx)\n"
           "  {\n"
           "    outInfo(\"initialize\");\n"
           "    ctx.extractValue(\"test_param\", test_param);\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n\n"
           "  TyErrorId destroy()\n"
           "  {\n"
           "    outInfo(\"destroy\");\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n\n"
           "  TyErrorId process(CAS &tcas, ResultSpecification const &res_spec)\n"
           "  {\n"
           "    outInfo(\"process start\");\n"
           "    rs::StopWatch clock;\n"
           "    rs::SceneCas cas(tcas);\n"
           "    pcl::PointCloud<pcl::PointXYZRGBA>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZRGBA>);\n"
           "    outInfo(\"Test param =  \" << test_param);\n"
           "    cas.get(VIEW_CLOUD,*cloud_ptr);\n\n"
           "    outInfo(\"Cloud size: \" << cloud_ptr->points.size());\n"
           "    outInfo(\"took: \" << clock.getTime() << \" ms.\");\n"
           "    return UIMA_ERR_NONE;\n"
           "  }\n"
           "};\n\n"
           "// This macro exports an entry point that is used to create the annotator.\n"
           "MAKE_AE("+annotatorName+")");
    f.write(txt)
    f.close()


def append_to_cmake(pathToPackage,annotatorName):
    libName = "rs_"+annotatorName
    f = open(pathToPackage+"/CMakeLists.txt",'a')

    f.write("rs_add_library("+libName+" src/"+annotatorName+".cpp)\n")
    f.write("target_link_libraries("+libName+" ${catkin_LIBRARIES})\n")
    f.close()

if __name__ == "__main__":

    if len(sys.argv) < 3:
        print ("Not enought arguments. Terminating.")
        print ("Syntax is : rs_new_annotator <package_name> <annotator_name>")
        exit()
    packageName = sys.argv[1];
    annotatorName = sys.argv[2];
     
    rospack = rospkg.RosPack()
    package_names = rospack.get_depends_on('robosherlock')
    if packageName not in package_names and packageName != "robosherlock":
        print ("First argument is not a valid ROS package. Terminating")
        exit()
    create_xml_def(rospack.get_path(packageName),annotatorName)
    create_cpp_source(rospack.get_path(packageName),annotatorName)
    append_to_cmake(rospack.get_path(packageName),annotatorName)
