/*
 * This file was generated by generate_typesystem.py.
 * Filename:    human_types
 * Name:        human
 * Description: No description given
 * Version:     1.0
 * Vendor:      None
 */
#ifndef __HUMAN_TYPES_H__
#define __HUMAN_TYPES_H__

#include <rs/feature_structure_proxy.h>
#include <rs/types/type_definitions.h>
#include <rs/types/core_types.h>
#include <rs/types/cv_types.h>

namespace rs
{

/*
 * No description given
 */
class Face : public Annotation
{
private:
  void initFields()
  {
    faceRect.init(this, "faceRect");
    label.init(this, "label");
    rgbImage.init(this, "rgbImage");
    depthImage.init(this, "depthImage");
    leftEyeRect.init(this, "leftEyeRect");
    mouthRect.init(this, "mouthRect");
    noseRect.init(this, "noseRect");
    perceived.init(this, "perceived");
    rightEyeRect.init(this, "rightEyeRect");
  }
public:
  // The bounding box of the face
  ComplexFeatureStructureEntry<Rect> faceRect;
  // The label of the face (wrt to the training data)
  FeatureStructureEntry<int> label;
  // No description given
  ComplexFeatureStructureEntry<Mat> rgbImage;
  // No description given
  ComplexFeatureStructureEntry<Mat> depthImage;
  // No description given
  ComplexFeatureStructureEntry<Rect> leftEyeRect;
  // No description given
  ComplexFeatureStructureEntry<Rect> mouthRect;
  // No description given
  ComplexFeatureStructureEntry<Rect> noseRect;
  // No description given
  FeatureStructureEntry<bool> perceived;
  // No description given
  ComplexFeatureStructureEntry<Rect> rightEyeRect;

  Face(const Face &other) :
      Annotation(other)
  {
    initFields();
  }

  Face(uima::FeatureStructure fs) :
      Annotation(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Joint : public Annotation
{
private:
  void initFields()
  {
    seen.init(this, "seen");
    jointName.init(this, "jointName");
  }
public:
  // No description given
  FeatureStructureEntry<bool> seen;
  // No description given
  FeatureStructureEntry<std::string> jointName;

  Joint(const Joint &other) :
      Annotation(other)
  {
    initFields();
  }

  Joint(uima::FeatureStructure fs) :
      Annotation(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class ObjActOn : public Annotation
{
private:
  void initFields()
  {
    objID.init(this, "objID");
    objName.init(this, "objName");
    hand.init(this, "hand");
  }
public:
  // No description given
  FeatureStructureEntry<std::string> objID;
  // No description given
  FeatureStructureEntry<std::string> objName;
  // No description given
  FeatureStructureEntry<std::string> hand;

  ObjActOn(const ObjActOn &other) :
      Annotation(other)
  {
    initFields();
  }

  ObjActOn(uima::FeatureStructure fs) :
      Annotation(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Joint2D : public Joint
{
private:
  void initFields()
  {
    position.init(this, "position");
  }
public:
  // No description given
  ComplexFeatureStructureEntry<Point2f> position;

  Joint2D(const Joint2D &other) :
      Joint(other)
  {
    initFields();
  }

  Joint2D(uima::FeatureStructure fs) :
      Joint(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Joint3D : public Joint
{
private:
  void initFields()
  {
    position.init(this, "position");
  }
public:
  // No description given
  ComplexFeatureStructureEntry<Point3f> position;

  Joint3D(const Joint3D &other) :
      Joint(other)
  {
    initFields();
  }

  Joint3D(uima::FeatureStructure fs) :
      Joint(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Human : public Identifiable
{
private:
  void initFields()
  {
    isVisible.init(this, "isVisible");
    userID.init(this, "userID");
    centerOfMass.init(this, "centerOfMass");
    joints2D.init(this, "joints2D");
    joints3D.init(this, "joints3D");
    bbox2D.init(this, "bbox2D");
    annotations.init(this, "annotations");
    jointAngles.init(this, "jointAngles");
    bbox3D.init(this, "bbox3D");
  }
public:
  // No description given
  FeatureStructureEntry<bool> isVisible;
  // No description given
  FeatureStructureEntry<int> userID;
  // No description given
  ComplexFeatureStructureEntry<Point3f> centerOfMass;
  // No description given
  ArrayFeatureStructureEntry<Joint2D> joints2D;
  // No description given
  ArrayFeatureStructureEntry<Joint3D> joints3D;
  // Currently only the 3D BBox
  ArrayFeatureStructureEntry<Point2f> bbox2D;
  // No description given
  ListFeatureStructureEntry<Annotation> annotations;
  // No description given
  ArrayFeatureStructureEntry<float> jointAngles;
  // No description given
  ArrayFeatureStructureEntry<Point3f> bbox3D;

  Human(const Human &other) :
      Identifiable(other)
  {
    initFields();
  }

  Human(uima::FeatureStructure fs) :
      Identifiable(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Action : public Annotation
{
private:
  void initFields()
  {
    name.init(this, "name");
    objectActedOn.init(this, "objectActedOn");
  }
public:
  // No description given
  FeatureStructureEntry<std::string> name;
  // No description given
  ComplexFeatureStructureEntry<ObjActOn> objectActedOn;

  Action(const Action &other) :
      Annotation(other)
  {
    initFields();
  }

  Action(uima::FeatureStructure fs) :
      Annotation(fs)
  {
    initFields();
  }
};

/*
 * Possible pointing action
 */
class PointingAction : public Action
{
private:
  void initFields()
  {
    start3D.init(this, "start3D");
    end3D.init(this, "end3D");
    direction.init(this, "direction");
    start2D.init(this, "start2D");
    end2D.init(this, "end2D");
  }
public:
  // No description given
  ComplexFeatureStructureEntry<Point3f> start3D;
  // No description given
  ComplexFeatureStructureEntry<Point3f> end3D;
  // Actually a Vector in 3D but for convenience stored as Point3f
  ComplexFeatureStructureEntry<Point3f> direction;
  // No description given
  ComplexFeatureStructureEntry<Point2f> start2D;
  // No description given
  ComplexFeatureStructureEntry<Point2f> end2D;

  PointingAction(const PointingAction &other) :
      Action(other)
  {
    initFields();
  }

  PointingAction(uima::FeatureStructure fs) :
      Action(fs)
  {
    initFields();
  }
};

}

TYPE_TRAIT(rs::Face, RS_HUMAN_FACE)
TYPE_TRAIT(rs::Joint, RS_HUMAN_JOINT)
TYPE_TRAIT(rs::ObjActOn, RS_HUMAN_OBJACTON)
TYPE_TRAIT(rs::Joint2D, RS_HUMAN_JOINT2D)
TYPE_TRAIT(rs::Joint3D, RS_HUMAN_JOINT3D)
TYPE_TRAIT(rs::Human, RS_HUMAN_HUMAN)
TYPE_TRAIT(rs::Action, RS_HUMAN_ACTION)
TYPE_TRAIT(rs::PointingAction, RS_HUMAN_POINTINGACTION)

#endif /* __HUMAN_TYPES_H__ */
