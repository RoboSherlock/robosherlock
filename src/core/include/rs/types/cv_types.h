/*
 * This file was generated by generate_typesystem.py.
 * Filename:    cv_types
 * Name:        cv
 * Description: No description given
 * Version:     1.0
 * Vendor:      None
 */
#ifndef __CV_TYPES_H__
#define __CV_TYPES_H__

#include <rs/feature_structure_proxy.h>
#include <rs/types/type_definitions.h>
#include <rs/types/core_types.h>

namespace rs
{

/*
 * 4D vector of floats
 */
class Vec4f : public FeatureStructureProxy
{
private:
  void initFields()
  {
    val.init(this, "val");
  }
public:
  // Values for each dimension
  ArrayFeatureStructureEntry<float> val;

  Vec4f(const Vec4f &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Vec4f(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class ObjectMap : public Identifiable
{
private:
  void initFields()
  {
    objectNames.init(this, "objectNames");
    objectColors.init(this, "objectColors");
  }
public:
  // No description given
  ListFeatureStructureEntry<std::string> objectNames;
  // No description given
  ListFeatureStructureEntry<int> objectColors;

  ObjectMap(const ObjectMap &other) :
      Identifiable(other)
  {
    initFields();
  }

  ObjectMap(uima::FeatureStructure fs) :
      Identifiable(fs)
  {
    initFields();
  }
};

/*
 * Matrix
 */
class Mat : public FeatureStructureProxy
{
private:
  void initFields()
  {
    data.init(this, "data");
    cols.init(this, "cols");
    rows.init(this, "rows");
    mat_type.init(this, "mat_type");
    step_size.init(this, "step_size");
  }
public:
  // Matrix data as raw bytes
  ArrayFeatureStructureEntry<char> data;
  // Number of columns
  FeatureStructureEntry<int> cols;
  // Number of rows
  FeatureStructureEntry<int> rows;
  // Type of matrix elements
  FeatureStructureEntry<int> mat_type;
  // Padded row length
  FeatureStructureEntry<int> step_size;

  Mat(const Mat &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Mat(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Image point
 */
class Point : public FeatureStructureProxy
{
private:
  void initFields()
  {
    x.init(this, "x");
    y.init(this, "y");
  }
public:
  // X coordinate
  FeatureStructureEntry<int> x;
  // Y coordinate
  FeatureStructureEntry<int> y;

  Point(const Point &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Point(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Image moments
 */
class Moments : public FeatureStructureProxy
{
private:
  void initFields()
  {
    m00.init(this, "m00");
    m01.init(this, "m01");
    m02.init(this, "m02");
    m03.init(this, "m03");
    m10.init(this, "m10");
    m11.init(this, "m11");
    m12.init(this, "m12");
    m20.init(this, "m20");
    m21.init(this, "m21");
    m30.init(this, "m30");
    mu02.init(this, "mu02");
    mu03.init(this, "mu03");
    mu11.init(this, "mu11");
    mu12.init(this, "mu12");
    mu20.init(this, "mu20");
    mu21.init(this, "mu21");
    mu30.init(this, "mu30");
    nu02.init(this, "nu02");
    nu03.init(this, "nu03");
    nu11.init(this, "nu11");
    nu12.init(this, "nu12");
    nu20.init(this, "nu20");
    nu21.init(this, "nu21");
    nu30.init(this, "nu30");
  }
public:
  // Spatial moments
  FeatureStructureEntry<double> m00;
  // Spatial moments
  FeatureStructureEntry<double> m01;
  // Spatial moments
  FeatureStructureEntry<double> m02;
  // Spatial moments
  FeatureStructureEntry<double> m03;
  // Spatial moments
  FeatureStructureEntry<double> m10;
  // Spatial moments
  FeatureStructureEntry<double> m11;
  // Spatial moments
  FeatureStructureEntry<double> m12;
  // Spatial moments
  FeatureStructureEntry<double> m20;
  // Spatial moments
  FeatureStructureEntry<double> m21;
  // Spatial moments
  FeatureStructureEntry<double> m30;
  // Central moments
  FeatureStructureEntry<double> mu02;
  // Central moments
  FeatureStructureEntry<double> mu03;
  // Central moments
  FeatureStructureEntry<double> mu11;
  // Central moments
  FeatureStructureEntry<double> mu12;
  // Central moments
  FeatureStructureEntry<double> mu20;
  // Central moments
  FeatureStructureEntry<double> mu21;
  // Central moments
  FeatureStructureEntry<double> mu30;
  // Central normalized moments
  FeatureStructureEntry<double> nu02;
  // Central normalized moments
  FeatureStructureEntry<double> nu03;
  // Central normalized moments
  FeatureStructureEntry<double> nu11;
  // Central normalized moments
  FeatureStructureEntry<double> nu12;
  // Central normalized moments
  FeatureStructureEntry<double> nu20;
  // Central normalized moments
  FeatureStructureEntry<double> nu21;
  // Central normalized moments
  FeatureStructureEntry<double> nu30;

  Moments(const Moments &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Moments(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Size in floating points
 */
class Size2f : public FeatureStructureProxy
{
private:
  void initFields()
  {
    height.init(this, "height");
    width.init(this, "width");
  }
public:
  // Height
  FeatureStructureEntry<float> height;
  // Width
  FeatureStructureEntry<float> width;

  Size2f(const Size2f &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Size2f(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * 3D vector of floats
 */
class Vec3f : public FeatureStructureProxy
{
private:
  void initFields()
  {
    val.init(this, "val");
  }
public:
  // Values for each dimension
  ArrayFeatureStructureEntry<float> val;

  Vec3f(const Vec3f &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Vec3f(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Size in pixel
 */
class Size : public FeatureStructureProxy
{
private:
  void initFields()
  {
    height.init(this, "height");
    width.init(this, "width");
  }
public:
  // Height in pixel
  FeatureStructureEntry<int> height;
  // Width in pixel
  FeatureStructureEntry<int> width;

  Size(const Size &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Size(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * 3D point with double precision
 */
class Point3d : public FeatureStructureProxy
{
private:
  void initFields()
  {
    x.init(this, "x");
    y.init(this, "y");
    z.init(this, "z");
  }
public:
  // X coordinate
  FeatureStructureEntry<double> x;
  // Y coordinate
  FeatureStructureEntry<double> y;
  // Z coordinate
  FeatureStructureEntry<double> z;

  Point3d(const Point3d &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Point3d(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * 2D point with single precision
 */
class Point2f : public FeatureStructureProxy
{
private:
  void initFields()
  {
    x.init(this, "x");
    y.init(this, "y");
  }
public:
  // X coordinate
  FeatureStructureEntry<float> x;
  // Y coordinate
  FeatureStructureEntry<float> y;

  Point2f(const Point2f &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Point2f(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * 3D point with single precision
 */
class Point3f : public FeatureStructureProxy
{
private:
  void initFields()
  {
    x.init(this, "x");
    y.init(this, "y");
    z.init(this, "z");
  }
public:
  // X coordinate
  FeatureStructureEntry<float> x;
  // Y coordinate
  FeatureStructureEntry<float> y;
  // Z coordinate
  FeatureStructureEntry<float> z;

  Point3f(const Point3f &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Point3f(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * 2D point with double precision
 */
class Point2d : public FeatureStructureProxy
{
private:
  void initFields()
  {
    x.init(this, "x");
    y.init(this, "y");
  }
public:
  // X coordinate
  FeatureStructureEntry<double> x;
  // Y coordinate
  FeatureStructureEntry<double> y;

  Point2d(const Point2d &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Point2d(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Key point
 */
class KeyPoint : public FeatureStructureProxy
{
private:
  void initFields()
  {
    pt.init(this, "pt");
    size.init(this, "size");
    angle.init(this, "angle");
    response.init(this, "response");
    octave.init(this, "octave");
    class_id.init(this, "class_id");
  }
public:
  // Position
  ComplexFeatureStructureEntry<Point2f> pt;
  // Size
  FeatureStructureEntry<float> size;
  // Angle of main orientation
  FeatureStructureEntry<float> angle;
  // Response
  FeatureStructureEntry<float> response;
  // Octave of key point
  FeatureStructureEntry<int> octave;
  // Class id of key point
  FeatureStructureEntry<int> class_id;

  KeyPoint(const KeyPoint &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  KeyPoint(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Axis aligned rectangle
 */
class Rect : public FeatureStructureProxy
{
private:
  void initFields()
  {
    pos.init(this, "pos");
    size.init(this, "size");
  }
public:
  // Position top left
  ComplexFeatureStructureEntry<Point> pos;
  // Size of rectanlge
  ComplexFeatureStructureEntry<Size> size;

  Rect(const Rect &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Rect(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Describes a region of interest in an image
 */
class ImageROI : public FeatureStructureProxy
{
private:
  void initFields()
  {
    phash.init(this, "phash");
    phash_image.init(this, "phash_image");
    mask.init(this, "mask");
    mask_hires.init(this, "mask_hires");
    roi.init(this, "roi");
    roi_hires.init(this, "roi_hires");
  }
public:
  // No description given
  FeatureStructureEntry<std::string> phash;
  // No description given
  FeatureStructureEntry<std::string> phash_image;
  // Mask for the region
  ComplexFeatureStructureEntry<Mat> mask;
  // Mask for the region
  ComplexFeatureStructureEntry<Mat> mask_hires;
  // Bounding rectanlge
  ComplexFeatureStructureEntry<Rect> roi;
  // Bounding rectanlge
  ComplexFeatureStructureEntry<Rect> roi_hires;

  ImageROI(const ImageROI &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  ImageROI(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * Axis aligned rectangle
 */
class RotatedRect : public FeatureStructureProxy
{
private:
  void initFields()
  {
    center.init(this, "center");
    size.init(this, "size");
    angle.init(this, "angle");
  }
public:
  // Center
  ComplexFeatureStructureEntry<Point2f> center;
  // Size of rectanlge
  ComplexFeatureStructureEntry<Size2f> size;
  // rotation angle in degree
  FeatureStructureEntry<float> angle;

  RotatedRect(const RotatedRect &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  RotatedRect(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

}

TYPE_TRAIT(rs::Vec4f, RS_CV_VEC4F)
TYPE_TRAIT(rs::ObjectMap, RS_CV_OBJECTMAP)
TYPE_TRAIT(rs::Mat, RS_CV_MAT)
TYPE_TRAIT(rs::Point, RS_CV_POINT)
TYPE_TRAIT(rs::Moments, RS_CV_MOMENTS)
TYPE_TRAIT(rs::Size2f, RS_CV_SIZE2F)
TYPE_TRAIT(rs::Vec3f, RS_CV_VEC3F)
TYPE_TRAIT(rs::Size, RS_CV_SIZE)
TYPE_TRAIT(rs::Point3d, RS_CV_POINT3D)
TYPE_TRAIT(rs::Point2f, RS_CV_POINT2F)
TYPE_TRAIT(rs::Point3f, RS_CV_POINT3F)
TYPE_TRAIT(rs::Point2d, RS_CV_POINT2D)
TYPE_TRAIT(rs::KeyPoint, RS_CV_KEYPOINT)
TYPE_TRAIT(rs::Rect, RS_CV_RECT)
TYPE_TRAIT(rs::ImageROI, RS_CV_IMAGEROI)
TYPE_TRAIT(rs::RotatedRect, RS_CV_ROTATEDRECT)

#endif /* __CV_TYPES_H__ */
