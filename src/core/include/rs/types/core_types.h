/*
 * This file was generated by generate_typesystem.py.
 * Filename:    core_types
 * Name:        core
 * Description: No description given
 * Version:     1.0
 * Vendor:      None
 */
#ifndef __CORE_TYPES_H__
#define __CORE_TYPES_H__

#include <rs/feature_structure_proxy.h>
#include <rs/types/type_definitions.h>
#include <rs/types/tf_types.h>

namespace rs
{

/*
 * No description given
 */
class Identifiable : public FeatureStructureProxy
{
private:
  void initFields()
  {
    id.init(this, "id");
    if(id().empty())
    {
      id(::mongo::OID::gen().toString());
    }
  }
public:
  // No description given
  FeatureStructureEntry<std::string> id;

  Identifiable(const Identifiable &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Identifiable(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class CWAssumption : public FeatureStructureProxy
{
private:
  void initFields()
  {
    cwObjects.init(this, "cwObjects");
  }
public:
  // No description given
  ArrayFeatureStructureEntry<std::string> cwObjects;

  CWAssumption(const CWAssumption &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  CWAssumption(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Query : public FeatureStructureProxy
{
private:
  void initFields()
  {
    timestamp.init(this, "timestamp");
    query.init(this, "query");
  }
public:
  // No description given
  FeatureStructureEntry<INT64> timestamp;
  // json string format of query
  FeatureStructureEntry<std::string> query;

  Query(const Query &other) :
      FeatureStructureProxy(other)
  {
    initFields();
  }

  Query(uima::FeatureStructure fs) :
      FeatureStructureProxy(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Annotation : public Identifiable
{
private:
  void initFields()
  {
    source.init(this, "source");
  }
public:
  // No description given
  FeatureStructureEntry<std::string> source;

  Annotation(const Annotation &other) :
      Identifiable(other)
  {
    initFields();
  }

  Annotation(uima::FeatureStructure fs) :
      Identifiable(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class Scene : public Identifiable
{
private:
  void initFields()
  {
    timestamp.init(this, "timestamp");
    viewPoint.init(this, "viewPoint");
    identifiables.init(this, "identifiables");
    annotations.init(this, "annotations");
    thermalViewPoint.init(this, "thermalViewPoint");
  }
public:
  // No description given
  FeatureStructureEntry<INT64> timestamp;
  // No description given
  ComplexFeatureStructureEntry<StampedTransform> viewPoint;
  // e.g. clusters(object hypotheses)
  ListFeatureStructureEntry<Identifiable> identifiables;
  // No description given
  ListFeatureStructureEntry<Annotation> annotations;
  // No description given
  ComplexFeatureStructureEntry<StampedTransform> thermalViewPoint;

  Scene(const Scene &other) :
      Identifiable(other)
  {
    initFields();
  }

  Scene(uima::FeatureStructure fs) :
      Identifiable(fs)
  {
    initFields();
  }
};

/*
 * No description given
 */
class SemanticMapObject : public Identifiable
{
private:
  void initFields()
  {
    transform.init(this, "transform");
    typeName.init(this, "typeName");
    name.init(this, "name");
    width.init(this, "width");
    height.init(this, "height");
    depth.init(this, "depth");
  }
public:
  // No description given
  ComplexFeatureStructureEntry<Pose> transform;
  // No description given
  FeatureStructureEntry<std::string> typeName;
  // No description given
  FeatureStructureEntry<std::string> name;
  // No description given
  FeatureStructureEntry<double> width;
  // No description given
  FeatureStructureEntry<double> height;
  // No description given
  FeatureStructureEntry<double> depth;

  SemanticMapObject(const SemanticMapObject &other) :
      Identifiable(other)
  {
    initFields();
  }

  SemanticMapObject(uima::FeatureStructure fs) :
      Identifiable(fs)
  {
    initFields();
  }
};

}

TYPE_TRAIT(rs::Identifiable, RS_CORE_IDENTIFIABLE)
TYPE_TRAIT(rs::CWAssumption, RS_CORE_CWASSUMPTION)
TYPE_TRAIT(rs::Query, RS_CORE_QUERY)
TYPE_TRAIT(rs::Annotation, RS_CORE_ANNOTATION)
TYPE_TRAIT(rs::Scene, RS_CORE_SCENE)
TYPE_TRAIT(rs::SemanticMapObject, RS_CORE_SEMANTICMAPOBJECT)

#endif /* __CORE_TYPES_H__ */
